#ifndef BLONSTECH_MATH_UNITS_H_
#define BLONSTECH_MATH_UNITS_H_

#include <stdint.h>

namespace blons
{
////////////////////////////////////////////////////////////////////////////////
/// \ingroup math
/// \brief Various unit types for dealing with coordinates and time
////////////////////////////////////////////////////////////////////////////////
namespace units
{
////////////////////////////////////////////////////////////////////////////////
/// \brief Measures pixel coordinates
////////////////////////////////////////////////////////////////////////////////
typedef int pixel;
////////////////////////////////////////////////////////////////////////////////
/// \brief Measures pixel coordinates with subpixel resolution
////////////////////////////////////////////////////////////////////////////////
typedef float subpixel;
////////////////////////////////////////////////////////////////////////////////
/// \brief Measures world space coordinates
////////////////////////////////////////////////////////////////////////////////
typedef float world;

////////////////////////////////////////////////////////////////////////////////
/// \brief Converts a given pixel coordinate to a subpixel coordinate
///
/// \param p Pixel coordinate to convert
/// \return Subpixel value
////////////////////////////////////////////////////////////////////////////////
inline subpixel pixel_to_subpixel(pixel p)
{
    return static_cast<subpixel>(p);
}

////////////////////////////////////////////////////////////////////////////////
/// \brief Converts a given subpixel coordinate to a pixel coordinate
///
/// \param p Subpixel coordinate to convert
/// \return Pixel value
////////////////////////////////////////////////////////////////////////////////
inline pixel subpixel_to_pixel(subpixel p)
{
    return static_cast<pixel>(p);
}

////////////////////////////////////////////////////////////////////////////////
/// \brief Unit types for dealing with time
////////////////////////////////////////////////////////////////////////////////
namespace time
{
////////////////////////////////////////////////////////////////////////////////
/// \brief Measures time in millisecond resolution
////////////////////////////////////////////////////////////////////////////////
typedef uint64_t ms;
////////////////////////////////////////////////////////////////////////////////
/// \brief Measures time in microsecond resolution
////////////////////////////////////////////////////////////////////////////////
typedef uint64_t us;

////////////////////////////////////////////////////////////////////////////////
/// \brief Converts microsecond to milliseconds
///
/// \param t Microseconds to convert
/// \return Milliseconds
////////////////////////////////////////////////////////////////////////////////
inline ms us_to_ms(us t)
{
    return t / 1000;
}

////////////////////////////////////////////////////////////////////////////////
/// \brief Converts milliseconds to microseconds
///
/// \param t Milliseconds to convert
/// \return Microseconds
////////////////////////////////////////////////////////////////////////////////
inline us ms_to_us(ms t)
{
    return t * 1000;
}
} // namespace time
} // namespace units
} // namespace blons

#endif // BLONSTECH_MATH_UNITS_H_